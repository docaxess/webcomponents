/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface IpEmail {
        /**
          * @default 'Email field cannot be empty'
         */
        "emptyFieldErrorMessage": string;
        "errorMessage": string;
        /**
          * @default 'Email'
         */
        "inputLabel": string;
        /**
          * @default 'Type your email here...'
         */
        "inputPlaceholder": string;
        /**
          * @default false
         */
        "invalid": boolean;
        /**
          * @default false
         */
        "required": boolean;
    }
    interface IpLogin {
        /**
          * @default 'Forgot password?'
         */
        "forgotPasswordLabel": string;
        /**
          * @default ''
         */
        "forgotPasswordLink": string;
        /**
          * @default 'Hide password'
         */
        "hidePasswordAriaLabel": string;
        /**
          * @default 'Required fields'
         */
        "indicationLabel": string;
        /**
          * @default 'Login'
         */
        "loginTitle": string;
        /**
          * @default 'The password must contain at least one digit'
         */
        "passwordDigitErrorMsg": string;
        /**
          * @default 'Password'
         */
        "passwordLabel": string;
        /**
          * @default 'The password must contain at least 8 characters'
         */
        "passwordLengthErrorMsg": string;
        /**
          * @default 'The password must contain at least a lower case'
         */
        "passwordLowercaseErrorMsg": string;
        /**
          * @default 'Password must contain at least one capital'
         */
        "passwordUppercaseErrorMsg": string;
        /**
          * @default 'Type your password here...'
         */
        "pwdPlaceholder": string;
        /**
          * @default 'Show password'
         */
        "showPasswordAriaLabel": string;
        /**
          * @default 'Submit the form'
         */
        "submitBtnAriaLabel": string;
        /**
          * @default 'Login'
         */
        "submitButtonLabel": string;
        /**
          * @default 'Username is required'
         */
        "usernameErrorMsg": string;
        /**
          * @default 'The email address is invalid'
         */
        "usernameInvalidEmailMsg": string;
        /**
          * @default 'Username'
         */
        "usernameLabel": string;
        /**
          * @default 'Type your username here...'
         */
        "usernamePlaceholder": string;
        /**
          * @default false
         */
        "usernameRequired": boolean;
        /**
          * @default 'text'
         */
        "usernameType": 'text' | 'email';
    }
    interface IpPassword {
        /**
          * @default 'Password field cannot be empty'
         */
        "emptyFieldErrorMessage": string;
        "errorMessage": string;
        "forgotPasswordLink": string;
        /**
          * @default 'Hide password'
         */
        "hidePasswordAriaLabel": string;
        /**
          * @default 'Type your password here...'
         */
        "inputPlaceholder": string;
        /**
          * @default false
         */
        "invalid": boolean;
        /**
          * @default 'Show password'
         */
        "showPasswordAriaLabel": string;
    }
}
export interface IpEmailCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIpEmailElement;
}
export interface IpLoginCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIpLoginElement;
}
export interface IpPasswordCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIpPasswordElement;
}
declare global {
    interface HTMLIpEmailElementEventMap {
        "inputChange": string;
    }
    interface HTMLIpEmailElement extends Components.IpEmail, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIpEmailElementEventMap>(type: K, listener: (this: HTMLIpEmailElement, ev: IpEmailCustomEvent<HTMLIpEmailElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIpEmailElementEventMap>(type: K, listener: (this: HTMLIpEmailElement, ev: IpEmailCustomEvent<HTMLIpEmailElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIpEmailElement: {
        prototype: HTMLIpEmailElement;
        new (): HTMLIpEmailElement;
    };
    interface HTMLIpLoginElementEventMap {
        "formSubmitted": any;
    }
    interface HTMLIpLoginElement extends Components.IpLogin, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIpLoginElementEventMap>(type: K, listener: (this: HTMLIpLoginElement, ev: IpLoginCustomEvent<HTMLIpLoginElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIpLoginElementEventMap>(type: K, listener: (this: HTMLIpLoginElement, ev: IpLoginCustomEvent<HTMLIpLoginElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIpLoginElement: {
        prototype: HTMLIpLoginElement;
        new (): HTMLIpLoginElement;
    };
    interface HTMLIpPasswordElementEventMap {
        "passwordChange": string;
    }
    interface HTMLIpPasswordElement extends Components.IpPassword, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIpPasswordElementEventMap>(type: K, listener: (this: HTMLIpPasswordElement, ev: IpPasswordCustomEvent<HTMLIpPasswordElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIpPasswordElementEventMap>(type: K, listener: (this: HTMLIpPasswordElement, ev: IpPasswordCustomEvent<HTMLIpPasswordElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIpPasswordElement: {
        prototype: HTMLIpPasswordElement;
        new (): HTMLIpPasswordElement;
    };
    interface HTMLElementTagNameMap {
        "ip-email": HTMLIpEmailElement;
        "ip-login": HTMLIpLoginElement;
        "ip-password": HTMLIpPasswordElement;
    }
}
declare namespace LocalJSX {
    interface IpEmail {
        /**
          * @default 'Email field cannot be empty'
         */
        "emptyFieldErrorMessage"?: string;
        "errorMessage"?: string;
        /**
          * @default 'Email'
         */
        "inputLabel"?: string;
        /**
          * @default 'Type your email here...'
         */
        "inputPlaceholder"?: string;
        /**
          * @default false
         */
        "invalid"?: boolean;
        "onInputChange"?: (event: IpEmailCustomEvent<string>) => void;
        /**
          * @default false
         */
        "required"?: boolean;
    }
    interface IpLogin {
        /**
          * @default 'Forgot password?'
         */
        "forgotPasswordLabel"?: string;
        /**
          * @default ''
         */
        "forgotPasswordLink"?: string;
        /**
          * @default 'Hide password'
         */
        "hidePasswordAriaLabel"?: string;
        /**
          * @default 'Required fields'
         */
        "indicationLabel"?: string;
        /**
          * @default 'Login'
         */
        "loginTitle"?: string;
        "onFormSubmitted"?: (event: IpLoginCustomEvent<any>) => void;
        /**
          * @default 'The password must contain at least one digit'
         */
        "passwordDigitErrorMsg"?: string;
        /**
          * @default 'Password'
         */
        "passwordLabel"?: string;
        /**
          * @default 'The password must contain at least 8 characters'
         */
        "passwordLengthErrorMsg"?: string;
        /**
          * @default 'The password must contain at least a lower case'
         */
        "passwordLowercaseErrorMsg"?: string;
        /**
          * @default 'Password must contain at least one capital'
         */
        "passwordUppercaseErrorMsg"?: string;
        /**
          * @default 'Type your password here...'
         */
        "pwdPlaceholder"?: string;
        /**
          * @default 'Show password'
         */
        "showPasswordAriaLabel"?: string;
        /**
          * @default 'Submit the form'
         */
        "submitBtnAriaLabel"?: string;
        /**
          * @default 'Login'
         */
        "submitButtonLabel"?: string;
        /**
          * @default 'Username is required'
         */
        "usernameErrorMsg"?: string;
        /**
          * @default 'The email address is invalid'
         */
        "usernameInvalidEmailMsg"?: string;
        /**
          * @default 'Username'
         */
        "usernameLabel"?: string;
        /**
          * @default 'Type your username here...'
         */
        "usernamePlaceholder"?: string;
        /**
          * @default false
         */
        "usernameRequired"?: boolean;
        /**
          * @default 'text'
         */
        "usernameType"?: 'text' | 'email';
    }
    interface IpPassword {
        /**
          * @default 'Password field cannot be empty'
         */
        "emptyFieldErrorMessage"?: string;
        "errorMessage"?: string;
        "forgotPasswordLink"?: string;
        /**
          * @default 'Hide password'
         */
        "hidePasswordAriaLabel"?: string;
        /**
          * @default 'Type your password here...'
         */
        "inputPlaceholder"?: string;
        /**
          * @default false
         */
        "invalid"?: boolean;
        "onPasswordChange"?: (event: IpPasswordCustomEvent<string>) => void;
        /**
          * @default 'Show password'
         */
        "showPasswordAriaLabel"?: string;
    }
    interface IntrinsicElements {
        "ip-email": IpEmail;
        "ip-login": IpLogin;
        "ip-password": IpPassword;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ip-email": LocalJSX.IpEmail & JSXBase.HTMLAttributes<HTMLIpEmailElement>;
            "ip-login": LocalJSX.IpLogin & JSXBase.HTMLAttributes<HTMLIpLoginElement>;
            "ip-password": LocalJSX.IpPassword & JSXBase.HTMLAttributes<HTMLIpPasswordElement>;
        }
    }
}
