/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface IpAlert {
        /**
          * @default ''
         */
        "alertTitle": string;
        /**
          * @default 'Close alert'
         */
        "closeAriaLabel": string;
        /**
          * @default ''
         */
        "message": string;
        /**
          * @default 'info'
         */
        "type": 'info' | 'warning' | 'danger' | 'success';
    }
}
export interface IpAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIpAlertElement;
}
declare global {
    interface HTMLIpAlertElementEventMap {
        "alertClosed": void;
    }
    interface HTMLIpAlertElement extends Components.IpAlert, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIpAlertElementEventMap>(type: K, listener: (this: HTMLIpAlertElement, ev: IpAlertCustomEvent<HTMLIpAlertElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIpAlertElementEventMap>(type: K, listener: (this: HTMLIpAlertElement, ev: IpAlertCustomEvent<HTMLIpAlertElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIpAlertElement: {
        prototype: HTMLIpAlertElement;
        new (): HTMLIpAlertElement;
    };
    interface HTMLElementTagNameMap {
        "ip-alert": HTMLIpAlertElement;
    }
}
declare namespace LocalJSX {
    interface IpAlert {
        /**
          * @default ''
         */
        "alertTitle"?: string;
        /**
          * @default 'Close alert'
         */
        "closeAriaLabel"?: string;
        /**
          * @default ''
         */
        "message"?: string;
        "onAlertClosed"?: (event: IpAlertCustomEvent<void>) => void;
        /**
          * @default 'info'
         */
        "type"?: 'info' | 'warning' | 'danger' | 'success';
    }
    interface IntrinsicElements {
        "ip-alert": IpAlert;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ip-alert": LocalJSX.IpAlert & JSXBase.HTMLAttributes<HTMLIpAlertElement>;
        }
    }
}
