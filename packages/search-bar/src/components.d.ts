/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface IpSearchBar {
        /**
          * @default 'Search'
         */
        "labelButton": string;
        /**
          * @default 'Search...'
         */
        "placeholder": string;
        /**
          * @default '[]'
         */
        "suggestionsData": string;
    }
}
export interface IpSearchBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIpSearchBarElement;
}
declare global {
    interface HTMLIpSearchBarElementEventMap {
        "buttonClicked": void;
    }
    interface HTMLIpSearchBarElement extends Components.IpSearchBar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIpSearchBarElementEventMap>(type: K, listener: (this: HTMLIpSearchBarElement, ev: IpSearchBarCustomEvent<HTMLIpSearchBarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIpSearchBarElementEventMap>(type: K, listener: (this: HTMLIpSearchBarElement, ev: IpSearchBarCustomEvent<HTMLIpSearchBarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIpSearchBarElement: {
        prototype: HTMLIpSearchBarElement;
        new (): HTMLIpSearchBarElement;
    };
    interface HTMLElementTagNameMap {
        "ip-search-bar": HTMLIpSearchBarElement;
    }
}
declare namespace LocalJSX {
    interface IpSearchBar {
        /**
          * @default 'Search'
         */
        "labelButton"?: string;
        "onButtonClicked"?: (event: IpSearchBarCustomEvent<void>) => void;
        /**
          * @default 'Search...'
         */
        "placeholder"?: string;
        /**
          * @default '[]'
         */
        "suggestionsData"?: string;
    }
    interface IntrinsicElements {
        "ip-search-bar": IpSearchBar;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ip-search-bar": LocalJSX.IpSearchBar & JSXBase.HTMLAttributes<HTMLIpSearchBarElement>;
        }
    }
}
